<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
            http://camel.apache.org/schema/spring
            http://camel.apache.org/schema/spring/camel-spring.xsd
            http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context-3.0.xsd">

    <bean id="configurationProperties" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
        <property name="ignoreUnresolvablePlaceholders" value="true"/>
        <property name="ignoreResourceNotFound" value="true"/>
        <property name="locations">
            <list merge="true">
                <value>classpath:default.properties</value>
                <value>classpath:stored.properties</value>
            </list>
        </property>
    </bean>

    <import resource="classpath*:hazelcast-context.xml"/>
    <context:component-scan base-package="com.mycompany.template"/>

    <!-- JMS -->
    <bean id="jmsConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
        <property name="brokerURL" value="failover:${jms.broker.list}"/>
    </bean>

    <bean id="pooledConnectionFactory" class="org.apache.activemq.pool.PooledConnectionFactory">
        <property name="timeBetweenExpirationCheckMillis" value="0"/>
        <property name="maxConnections" value="8"/>
        <property name="idleTimeout" value="0"/>
        <property name="connectionFactory" ref="jmsConnectionFactory"/>
    </bean>

    <bean id="jmsConfig" class="org.apache.camel.component.jms.JmsConfiguration">
        <property name="connectionFactory" ref="pooledConnectionFactory"/>
        <property name="transacted" value="false"/>
    </bean>

    <bean id="activemq" class="org.apache.activemq.camel.component.ActiveMQComponent">
        <property name="configuration" ref="jmsConfig"/>
    </bean>

    <!-- Aggregators config -->
    <bean id="hazelcastAggregatorRepository"
          class="com.mycompany.template.repository.HazelcastAggregatorRepository" abstract="true">
        <property name="hazelcastInstance" ref="hazelcastInstance"/>
    </bean>

    <bean id="pollRepo" parent="hazelcastAggregatorRepository">
        <property name="repository" value="pollRepo"/>
    </bean>


    <camelContext xmlns="http://camel.apache.org/schema/spring">
        <jmxAgent id="jmx" disabled="true"/>
        <threadPoolProfile id="defaultProfile" defaultProfile="true" maxPoolSize="64"/>

        <!-- Queues -->
        <endpoint id="poll" uri="activemq:queue:poll?concurrentConsumers=${camel.activemq.consumers}"/>
        <endpoint id="poll.aggregate" uri="activemq:queue:poll.aggregate?concurrentConsumers=${camel.activemq.consumers}"/>

        <endpoint id="vote" uri="activemq:queue:vote?concurrentConsumers=${camel.activemq.consumers}"/>

        <!-- Processing Poll Messges -->
        <route>
            <from uri="ref:poll"/>
            <process ref=""/>
            <split>
                <method bean="pollSplitter" method="split"/>
                <to uri="poll.aggregate"/>
            </split>
        </route>

        <!-- Processing Vote Messges -->
        <route>
            <from uri="ref:vote"/>
            <process ref="voteProcessor"/>
            <to uri="poll.aggregate"/>
        </route>

        <!-- Poll lifecycle aggregator -->
        <route id="pollLifecycle">
            <from uri="ref:poll.aggregate"/>
            <log message="Updating poll state: ${body.pollId}" loggingLevel="INFO"/>
            <aggregate strategyRef="pollFSM" aggregationRepositoryRef="pollRepo">
                <correlationExpression>
                    <simple>${body.pollId}</simple>
                </correlationExpression>
                <completionPredicate>
                    <method bean="pollFSM" method="isCompleted"/>
                </completionPredicate>
                <stop/>
            </aggregate>
        </route>

    </camelContext>

    <!-- Processors -->
    <bean id="pollSplitter" class="com.mycompany.template.splitters.PollSplitter"/>

    <bean id="voteProcessor" class="com.mycompany.template.processors.VoteProcessor"/>

    <!-- Aggregators -->
    <bean id="pollFSM" class="com.mycompany.template.PollAggregationStrategy" />
</beans>
